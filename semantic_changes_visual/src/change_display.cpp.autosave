/*
 * Copyright (c) 2008, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include <OgreSceneNode.h>
#include <OgreSceneManager.h>

#include <ros/time.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>

#include <tf/transform_listener.h>

#include "rviz/default_plugin/point_cloud_common.h"
#include "rviz/display_context.h"
#include "rviz/frame_manager.h"
#include "rviz/ogre_helpers/point_cloud.h"
#include "rviz/properties/int_property.h"

#include "change_display.h"

using namespace rviz;
using namespace std;

namespace semantic_changes_visual
{

ChangeDisplay::ChangeDisplay()
  : point_cloud_common_( new PointCloudCommon( this ))
{
  queue_size_property_ = new IntProperty( "Queue Size", 10,
                                          "Advanced: set the size of the incoming PointCloud message queue. "
                                          " Increasing this is useful if your incoming TF data is delayed significantly "
                                          "from your PointCloud data, but it can greatly increase memory usage if the messages are big.",
                                          this, SLOT( updateQueueSize() ));

  // PointCloudCommon sets up a callback queue with a thread for each
  // instance.  Use that for processing incoming messages.
  update_nh_.setCallbackQueue( point_cloud_common_->getCallbackQueue() );
}

ChangeDisplay::~ChangeDisplay()
{
  delete point_cloud_common_;
}

void ChangeDisplay::onInitialize()
{
  MFDClass::onInitialize();
  point_cloud_common_->initialize( context_, scene_node_ );
}

void ChangeDisplay::updateQueueSize()
{
  tf_filter_->setQueueSize( (uint32_t) queue_size_property_->getInt() );
}

void ChangeDisplay::processMessage( const ChangedSceneConstPtr& scene )
{
  addColoredCloud(scene->scene_cloud, -1, -1, -1);

  addSimpleChanges(scene->removed, Change::REMOVE);
  addSimpleChanges(scene->added, Change::ADD);
  addSimpleChanges(scene->preserved, Change::PRESERVE);

  sensor_msgs::PointCloud2Ptr to_display(new sensor_msgs::PointCloud2());
  pcl::toROSMsg(display_cloud, *to_display);

  to_display->header = scene->header;

  point_cloud_common_->addMessage(to_display);
}

void ChangeDisplay::addSimpleChanges( const std::vector<SimpleChange>& changes, Change::Type type ) {
    uchar r, g, b;
    Change::getColors(type, r, g, b);
    for(std::vector<SimpleChange>::const_iterator ch = changes.begin(); ch < changes.end(); ch++) {
        Cloud cloud;
        pcl::fromROSMsg(*ch, cloud);
        addColoredCloud(cloud, r, g, b);
        addAnnotatedBB(cloud, ch->label, r, g, b);
    }
}

void ChangeDisplay::addColoredCloud( const Cloud& cloud, uchar r, uchar g, uchar b ) {
    for(Cloud::iterator pt = cloud.begin(); pt < cloud.end(); pt++) {
        pt->r = (r > 0) ? r : pt->r;
        pt->g = (g > 0) ? g : pt->g;
        pt->b = (b > 0) ? b : pt->b;
    }
    display_cloud += cloud;
}

void ChangeDisplay::addAnnotatedBB( const Cloud& cloud, std::string label,  uchar r, uchar g, uchar b ) {
    PointT min, max;
    pcl::getMinMax3D (cloud, min, max);
    
    for()
    LinePtr line(new Line(scene_manager_, scene_node_));
    line->setPoints(Ogre::Vector3(x, y, z));
    bb_lines.push_back(line);
}


void ChangeDisplay::update( float wall_dt, float ros_dt )
{
  point_cloud_common_->update( wall_dt, ros_dt );
}

void ChangeDisplay::reset()
{
  MFDClass::reset();
  point_cloud_common_->reset();
}

} // namespace rviz

#include <pluginlib/class_list_macros.h>
PLUGINLIB_EXPORT_CLASS( semantic_changes_visual::ChangeDisplay, rviz::Display )
